fun :: 'a -> 'a
id x = x

val :: int
x = (if true then id else id end) 5

datatype Paired 'a = 
| Pair 'a 'a
end

datatype List 'a = 
| Cons 'a (List 'a)
| Nil
end 

val :: (List (Paired int))
ribs = [Pair 1 2, Pair 2 3]

val :: List int
leafs = [1, 2, 3, 4]

fun :: (List 'a) -> 'a -> (List 'a)
insert list n = 
case list of
| x : xs ->

fun :: (List (Paired int)) -> (List int) -> (List bool)
dfs ribs leafs = 
    let
        fun :: (List (Paired int)) -> (List int) -> (List bool) -> (List bool)
        dfs' ribs leafs vis =
            case ribs of
            | [] -> vis
            | x:xs -> dfs'
            end
end

val :: List bool
x = dfs ribs leafs
